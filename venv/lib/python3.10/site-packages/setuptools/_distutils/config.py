"""distutils.pypirc

Provides the PyPIRCCommand class, the base class for the command classes
that uses .pypirc in the distutils.command package.
"""
import os
from configparser import RawConfigParser

<<<<<<< HEAD:venv/lib/python3.10/site-packages/setuptools/_distutils/config.py
from distutils.cmd import Command
=======
from .cmd import Command
>>>>>>> 63c587b5f623b9cf60f81e2f967798a80ca5fec9:venv/lib/python3.12/site-packages/setuptools/_distutils/config.py

DEFAULT_PYPIRC = """\
[distutils]
index-servers =
    pypi

[pypi]
username:%s
password:%s
"""

<<<<<<< HEAD:venv/lib/python3.10/site-packages/setuptools/_distutils/config.py
class PyPIRCCommand(Command):
    """Base command that knows how to handle the .pypirc file
    """
=======

class PyPIRCCommand(Command):
    """Base command that knows how to handle the .pypirc file"""

>>>>>>> 63c587b5f623b9cf60f81e2f967798a80ca5fec9:venv/lib/python3.12/site-packages/setuptools/_distutils/config.py
    DEFAULT_REPOSITORY = 'https://upload.pypi.org/legacy/'
    DEFAULT_REALM = 'pypi'
    repository = None
    realm = None

    user_options = [
<<<<<<< HEAD:venv/lib/python3.10/site-packages/setuptools/_distutils/config.py
        ('repository=', 'r',
         "url of repository [default: %s]" % \
            DEFAULT_REPOSITORY),
        ('show-response', None,
         'display full response text from server')]
=======
        ('repository=', 'r', "url of repository [default: %s]" % DEFAULT_REPOSITORY),
        ('show-response', None, 'display full response text from server'),
    ]
>>>>>>> 63c587b5f623b9cf60f81e2f967798a80ca5fec9:venv/lib/python3.12/site-packages/setuptools/_distutils/config.py

    boolean_options = ['show-response']

    def _get_rc_file(self):
        """Returns rc file path."""
        return os.path.join(os.path.expanduser('~'), '.pypirc')

    def _store_pypirc(self, username, password):
        """Creates a default .pypirc file."""
        rc = self._get_rc_file()
        with os.fdopen(os.open(rc, os.O_CREAT | os.O_WRONLY, 0o600), 'w') as f:
            f.write(DEFAULT_PYPIRC % (username, password))

<<<<<<< HEAD:venv/lib/python3.10/site-packages/setuptools/_distutils/config.py
    def _read_pypirc(self):
=======
    def _read_pypirc(self):  # noqa: C901
>>>>>>> 63c587b5f623b9cf60f81e2f967798a80ca5fec9:venv/lib/python3.12/site-packages/setuptools/_distutils/config.py
        """Reads the .pypirc file."""
        rc = self._get_rc_file()
        if os.path.exists(rc):
            self.announce('Using PyPI login from %s' % rc)
            repository = self.repository or self.DEFAULT_REPOSITORY

            config = RawConfigParser()
            config.read(rc)
            sections = config.sections()
            if 'distutils' in sections:
                # let's get the list of servers
                index_servers = config.get('distutils', 'index-servers')
<<<<<<< HEAD:venv/lib/python3.10/site-packages/setuptools/_distutils/config.py
                _servers = [server.strip() for server in
                            index_servers.split('\n')
                            if server.strip() != '']
=======
                _servers = [
                    server.strip()
                    for server in index_servers.split('\n')
                    if server.strip() != ''
                ]
>>>>>>> 63c587b5f623b9cf60f81e2f967798a80ca5fec9:venv/lib/python3.12/site-packages/setuptools/_distutils/config.py
                if _servers == []:
                    # nothing set, let's try to get the default pypi
                    if 'pypi' in sections:
                        _servers = ['pypi']
                    else:
                        # the file is not properly defined, returning
                        # an empty dict
                        return {}
                for server in _servers:
                    current = {'server': server}
                    current['username'] = config.get(server, 'username')

                    # optional params
<<<<<<< HEAD:venv/lib/python3.10/site-packages/setuptools/_distutils/config.py
                    for key, default in (('repository',
                                          self.DEFAULT_REPOSITORY),
                                         ('realm', self.DEFAULT_REALM),
                                         ('password', None)):
=======
                    for key, default in (
                        ('repository', self.DEFAULT_REPOSITORY),
                        ('realm', self.DEFAULT_REALM),
                        ('password', None),
                    ):
>>>>>>> 63c587b5f623b9cf60f81e2f967798a80ca5fec9:venv/lib/python3.12/site-packages/setuptools/_distutils/config.py
                        if config.has_option(server, key):
                            current[key] = config.get(server, key)
                        else:
                            current[key] = default

                    # work around people having "repository" for the "pypi"
                    # section of their config set to the HTTP (rather than
                    # HTTPS) URL
<<<<<<< HEAD:venv/lib/python3.10/site-packages/setuptools/_distutils/config.py
                    if (server == 'pypi' and
                        repository in (self.DEFAULT_REPOSITORY, 'pypi')):
                        current['repository'] = self.DEFAULT_REPOSITORY
                        return current

                    if (current['server'] == repository or
                        current['repository'] == repository):
=======
                    if server == 'pypi' and repository in (
                        self.DEFAULT_REPOSITORY,
                        'pypi',
                    ):
                        current['repository'] = self.DEFAULT_REPOSITORY
                        return current

                    if (
                        current['server'] == repository
                        or current['repository'] == repository
                    ):
>>>>>>> 63c587b5f623b9cf60f81e2f967798a80ca5fec9:venv/lib/python3.12/site-packages/setuptools/_distutils/config.py
                        return current
            elif 'server-login' in sections:
                # old format
                server = 'server-login'
                if config.has_option(server, 'repository'):
                    repository = config.get(server, 'repository')
                else:
                    repository = self.DEFAULT_REPOSITORY
<<<<<<< HEAD:venv/lib/python3.10/site-packages/setuptools/_distutils/config.py
                return {'username': config.get(server, 'username'),
                        'password': config.get(server, 'password'),
                        'repository': repository,
                        'server': server,
                        'realm': self.DEFAULT_REALM}
=======
                return {
                    'username': config.get(server, 'username'),
                    'password': config.get(server, 'password'),
                    'repository': repository,
                    'server': server,
                    'realm': self.DEFAULT_REALM,
                }
>>>>>>> 63c587b5f623b9cf60f81e2f967798a80ca5fec9:venv/lib/python3.12/site-packages/setuptools/_distutils/config.py

        return {}

    def _read_pypi_response(self, response):
        """Read and decode a PyPI HTTP response."""
        import cgi
<<<<<<< HEAD:venv/lib/python3.10/site-packages/setuptools/_distutils/config.py
=======

>>>>>>> 63c587b5f623b9cf60f81e2f967798a80ca5fec9:venv/lib/python3.12/site-packages/setuptools/_distutils/config.py
        content_type = response.getheader('content-type', 'text/plain')
        encoding = cgi.parse_header(content_type)[1].get('charset', 'ascii')
        return response.read().decode(encoding)

    def initialize_options(self):
        """Initialize options."""
        self.repository = None
        self.realm = None
        self.show_response = 0

    def finalize_options(self):
        """Finalizes options."""
        if self.repository is None:
            self.repository = self.DEFAULT_REPOSITORY
        if self.realm is None:
            self.realm = self.DEFAULT_REALM
